#ifndef F_GPIO_H__
#define F_GPIO_H__

// This file is autogenerated from `../tst/gpio.csv'. Do not edit, your changes will be lost!

// Pin Assignments for processor Arduino Mega 328P [avr8], project: Ropemaker Controller.
enum {
    // Console
    GPIO_PIN_CONS_TX = 1,                          // Console serial data out
    GPIO_PIN_CONS_RX = 0,                          // Console serial data in

    // Switch
    GPIO_PIN_E_MON = 2,                            // Monitor 12V supply to Run rly via E Stop Sw.
    GPIO_PIN_REM1_RUN = 4,                         // Wired remote RUN/STOP active low.
    GPIO_PIN_REM1_DIR = 5,                         // Wired remote FWD/REV active low.
    GPIO_PIN_REM2_RUN = 6,                         // Wireless remote RUN/STOP active low.
    GPIO_PIN_REM2_DIR = 7,                         // Wireless remote FWD/REV active low.
    GPIO_PIN_SW_RUN = A2,                          // RUN/STOP button active low.
    GPIO_PIN_SW_DIR = A3,                          // FWD/REV button active low.

    // Output
    GPIO_PIN_RLY_RUN = 3,                          // Run relay active high.
    GPIO_PIN_RLY_DIR2 = 8,                         // Dir 2 relay active high.
    GPIO_PIN_RLY_START = 9,                        // Soft start relay active high.
    GPIO_PIN_LEDS = 10,                            // WS2812 indicators drive.
    GPIO_PIN_RLY_DIR1 = A1,                        // Dir 1 relay active high.
    GPIO_PIN_DEBUG_0 = A4,                         // 

    // SPI
    GPIO_PIN_HEARTBEAT_LED = 13,                   // Blinky LED

    // Analogue
    GPIO_PIN_V_MON = A0,                           // Monitor input volts.
};

// Extra symbols from symbol directive.
#define GPIO_FOO bar = 33 // 1


// Direct access ports.

// RLY_RUN: Run relay active high.
static inline void gpioRlyRunSetModeOutput() { DDRD |= _BV(3); }
static inline void gpioRlyRunSetModeInput() { DDRD &= ~_BV(3); }
static inline void gpioRlyRunSetMode(bool fout) { if (fout) DDRD |= _BV(3); else DDRD &= ~_BV(3); }
static inline bool gpioRlyRunRead() { return PIND | _BV(3); }
static inline void gpioRlyRunToggle() { PORTD ^= _BV(3); }
static inline void gpioRlyRunSet() { PORTD |= _BV(3); }
static inline bool gpioRlyRunGet() { return PORTD & _BV(3); }
static inline void gpioRlyRunClear() { PORTD &= ~_BV(3); }
static inline void gpioRlyRunWrite(bool b) { if (b) PORTD |= _BV(3); else PORTD &= ~_BV(3); }

// RLY_DIR2: Dir 2 relay active high.
static inline void gpioRlyDir2SetModeOutput() { DDRB |= _BV(0); }
static inline void gpioRlyDir2SetModeInput() { DDRB &= ~_BV(0); }
static inline void gpioRlyDir2SetMode(bool fout) { if (fout) DDRB |= _BV(0); else DDRB &= ~_BV(0); }
static inline bool gpioRlyDir2Read() { return PINB | _BV(0); }
static inline void gpioRlyDir2Toggle() { PORTB ^= _BV(0); }
static inline void gpioRlyDir2Set() { PORTB |= _BV(0); }
static inline bool gpioRlyDir2Get() { return PORTB & _BV(0); }
static inline void gpioRlyDir2Clear() { PORTB &= ~_BV(0); }
static inline void gpioRlyDir2Write(bool b) { if (b) PORTB |= _BV(0); else PORTB &= ~_BV(0); }

// RLY_START: Soft start relay active high.
static inline void gpioRlyStartSetModeOutput() { DDRB |= _BV(1); }
static inline void gpioRlyStartSetModeInput() { DDRB &= ~_BV(1); }
static inline void gpioRlyStartSetMode(bool fout) { if (fout) DDRB |= _BV(1); else DDRB &= ~_BV(1); }
static inline bool gpioRlyStartRead() { return PINB | _BV(1); }
static inline void gpioRlyStartToggle() { PORTB ^= _BV(1); }
static inline void gpioRlyStartSet() { PORTB |= _BV(1); }
static inline bool gpioRlyStartGet() { return PORTB & _BV(1); }
static inline void gpioRlyStartClear() { PORTB &= ~_BV(1); }
static inline void gpioRlyStartWrite(bool b) { if (b) PORTB |= _BV(1); else PORTB &= ~_BV(1); }

// HEARTBEAT_LED: Blinky LED
static inline void gpioHeartbeatLedSetModeOutput() { DDRB |= _BV(5); }
static inline void gpioHeartbeatLedSetModeInput() { DDRB &= ~_BV(5); }
static inline void gpioHeartbeatLedSetMode(bool fout) { if (fout) DDRB |= _BV(5); else DDRB &= ~_BV(5); }
static inline bool gpioHeartbeatLedRead() { return PINB | _BV(5); }
static inline void gpioHeartbeatLedToggle() { PORTB ^= _BV(5); }
static inline void gpioHeartbeatLedSet() { PORTB |= _BV(5); }
static inline bool gpioHeartbeatLedGet() { return PORTB & _BV(5); }
static inline void gpioHeartbeatLedClear() { PORTB &= ~_BV(5); }
static inline void gpioHeartbeatLedWrite(bool b) { if (b) PORTB |= _BV(5); else PORTB &= ~_BV(5); }

// RLY_DIR1: Dir 1 relay active high.
static inline void gpioRlyDir1SetModeOutput() { DDRC |= _BV(1); }
static inline void gpioRlyDir1SetModeInput() { DDRC &= ~_BV(1); }
static inline void gpioRlyDir1SetMode(bool fout) { if (fout) DDRC |= _BV(1); else DDRC &= ~_BV(1); }
static inline bool gpioRlyDir1Read() { return PINC | _BV(1); }
static inline void gpioRlyDir1Toggle() { PORTC ^= _BV(1); }
static inline void gpioRlyDir1Set() { PORTC |= _BV(1); }
static inline bool gpioRlyDir1Get() { return PORTC & _BV(1); }
static inline void gpioRlyDir1Clear() { PORTC &= ~_BV(1); }
static inline void gpioRlyDir1Write(bool b) { if (b) PORTC |= _BV(1); else PORTC &= ~_BV(1); }

// DEBUG_0: 
static inline void gpioDebug0SetModeOutput() { DDRC |= _BV(4); }
static inline void gpioDebug0SetModeInput() { DDRC &= ~_BV(4); }
static inline void gpioDebug0SetMode(bool fout) { if (fout) DDRC |= _BV(4); else DDRC &= ~_BV(4); }
static inline bool gpioDebug0Read() { return PINC | _BV(4); }
static inline void gpioDebug0Toggle() { PORTC ^= _BV(4); }
static inline void gpioDebug0Set() { PORTC |= _BV(4); }
static inline bool gpioDebug0Get() { return PORTC & _BV(4); }
static inline void gpioDebug0Clear() { PORTC &= ~_BV(4); }
static inline void gpioDebug0Write(bool b) { if (b) PORTC |= _BV(4); else PORTC &= ~_BV(4); }

#endif   // F_GPIO_H__
